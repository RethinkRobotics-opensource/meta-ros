From 882cc68fcc019e691179241205a1667118c8e2c2 Mon Sep 17 00:00:00 2001
From: Matthias Schoepfer <m.schoepfer@rethinkrobotics.com>
Date: Thu, 8 Feb 2024 18:10:36 +0100
Subject: [PATCH] CMakeLists.txt: using targets to avoid TMPDIR leak

Using cmake targets instead of leaking include directories into
the .cmake files. Also adding the version for the .so to fix
qa issue with yocto.

Signed-off-by: Matthias Schoepfer <m.schoepfer@rethinkrobotics.com>
---
 CMakeLists.txt               | 22 ++-------------
 CMakeModules/Findflann.cmake | 12 --------
 CMakeModules/ompl.pc.in      |  2 +-
 omplConfig.cmake.in          | 53 ++++++++----------------------------
 src/ompl/CMakeLists.txt      | 36 ++++++++++++++----------
 5 files changed, 38 insertions(+), 87 deletions(-)
 delete mode 100644 CMakeModules/Findflann.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 09fc750..982201e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -29,11 +29,9 @@ set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
 
 set(OMPL_CMAKE_UTIL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules"
     CACHE FILEPATH "Path to directory with auxiliary CMake scripts for OMPL")
-set(OMPL_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/src;${CMAKE_CURRENT_BINARY_DIR}/src")
 set(OMPL_DEMO_INSTALL_DIR "${CMAKE_INSTALL_DATAROOTDIR}/ompl/demos"
     CACHE STRING "Relative path to directory where demos will be installed")
 
-include_directories("${OMPL_INCLUDE_DIRS}")
 
 if(MSVC)
     add_definitions(-DBOOST_ALL_NO_LIB)
@@ -50,7 +48,6 @@ set_package_properties(Boost PROPERTIES
 set(Boost_USE_MULTITHREADED ON)
 set(Boost_NO_BOOST_CMAKE ON)
 find_package(Boost 1.58 QUIET REQUIRED COMPONENTS serialization filesystem system program_options)
-include_directories(SYSTEM ${Boost_INCLUDE_DIR})
 
 # Add support in Boost::Python for std::shared_ptr
 # This is a hack that replaces boost::shared_ptr related code with std::shared_ptr.
@@ -64,9 +61,6 @@ if (NOT Boost_VERSION_STRING)
             "${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_PATCH_VERSION}")
     endif()
 endif()
-if(Boost_VERSION_STRING VERSION_LESS "1.63.0")
-    include_directories("${CMAKE_CURRENT_SOURCE_DIR}/src/external")
-endif()
 
 
 # on macOS we need to check whether to use libc++ or libstdc++ with clang++
@@ -110,7 +104,6 @@ set_package_properties(Eigen3 PROPERTIES
     URL "http://eigen.tuxfamily.org"
     PURPOSE "A linear algebra library used throughout OMPL.")
 find_package(Eigen3 REQUIRED)
-include_directories("${EIGEN3_INCLUDE_DIR}")
 
 set_package_properties(MORSE PROPERTIES
     URL "https://www.openrobots.org/wiki/morse"
@@ -121,29 +114,21 @@ set(OMPL_EXTENSION_MORSE ${MORSE_FOUND})
 set_package_properties(ODE PROPERTIES
     URL "http://ode.org"
     PURPOSE "The Open Dynamics Engine can be used as a \"black box\" for kinodynamic planning.")
-find_package(ODE QUIET)
+find_package(ODE CONFIG QUIET REQUIRED)
 set(OMPL_EXTENSION_ODE ${ODE_FOUND})
-if (OMPL_EXTENSION_ODE)
-  include_directories(${ODE_INCLUDE_DIRS})
-endif()
 
 set_package_properties(Triangle PROPERTIES
     URL "http://www.cs.cmu.edu/~quake/triangle.html"
     PURPOSE "Used to create triangular decompositions of polygonal 2D environments.")
 find_package(Triangle QUIET)
 set(OMPL_EXTENSION_TRIANGLE ${TRIANGLE_FOUND})
-if (OMPL_EXTENSION_TRIANGLE)
-  include_directories(${TRIANGLE_INCLUDE_DIR})
-endif()
 
 set_package_properties(flann PROPERTIES
     URL "https://github.com/mariusmuja/flann"
     PURPOSE "If detetected, FLANN can be used for nearest neighbor queries by OMPL.")
-find_package(flann 1.8.3 QUIET)
+find_package(flann 1.8.3 QUIET CONFIG)
 if (FLANN_FOUND)
     set(OMPL_HAVE_FLANN 1)
-    include_directories("${FLANN_INCLUDE_DIRS}")
-    link_directories(${FLANN_LIBRARY_DIRS})
 endif()
 
 set_package_properties(spot PROPERTIES
@@ -206,8 +191,7 @@ set(LIB_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR})
 configure_package_config_file(omplConfig.cmake.in
     ${CMAKE_CURRENT_BINARY_DIR}/omplConfig.cmake
     INSTALL_DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/ompl/cmake
-    PATH_VARS INCLUDE_INSTALL_DIR LIB_INSTALL_DIR
-    NO_CHECK_REQUIRED_COMPONENTS_MACRO)
+    )
 write_basic_package_version_file(
     ${CMAKE_CURRENT_BINARY_DIR}/omplConfigVersion.cmake
     VERSION ${PROJECT_VERSION}
diff --git a/CMakeModules/Findflann.cmake b/CMakeModules/Findflann.cmake
deleted file mode 100644
index a97cb0f..0000000
--- a/CMakeModules/Findflann.cmake
+++ /dev/null
@@ -1,12 +0,0 @@
-# Find FLANN, a Fast Library for Approximate Nearest Neighbors
-
-include(FindPackageHandleStandardArgs)
-
-find_package(PkgConfig)
-if(PKGCONFIG_FOUND)
-    pkg_check_modules(FLANN flann)
-    if(FLANN_LIBRARIES AND NOT FLANN_INCLUDE_DIRS)
-        set(FLANN_INCLUDE_DIRS "/usr/include")
-    endif()
-endif()
-find_package_handle_standard_args(flann DEFAULT_MSG FLANN_LIBRARIES FLANN_INCLUDE_DIRS)
diff --git a/CMakeModules/ompl.pc.in b/CMakeModules/ompl.pc.in
index b7bbe3d..c6bffdc 100644
--- a/CMakeModules/ompl.pc.in
+++ b/CMakeModules/ompl.pc.in
@@ -9,4 +9,4 @@ Description: @PKG_DESC@
 Version: @PROJECT_VERSION@
 Requires: @PKG_EXTERNAL_DEPS@
 Libs: -L${libdir} @PKG_OMPL_LIBS@
-Cflags: -std=c++14 -I${includedir} -I@Boost_INCLUDE_DIR@
+Cflags: -std=c++14 -I${includedir}
diff --git a/omplConfig.cmake.in b/omplConfig.cmake.in
index 2d88251..0cf8ccf 100644
--- a/omplConfig.cmake.in
+++ b/omplConfig.cmake.in
@@ -18,46 +18,17 @@ set(OMPL_MAJOR_VERSION @PROJECT_VERSION_MAJOR@)
 set(OMPL_MINOR_VERSION @PROJECT_VERSION_MINOR@)
 set(OMPL_PATCH_VERSION @PROJECT_VERSION_PATCH@)
 
-set_and_check(OMPL_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
-set(OMPL_INCLUDE_DIRS "${OMPL_INCLUDE_DIR};@Boost_INCLUDE_DIR@;@EIGEN3_INCLUDE_DIR@")
-foreach(_dir @FLANN_INCLUDE_DIRS@;@ODE_INCLUDE_DIRS@;@SPOT_INCLUDE_DIRS@;@TRIANGLE_INCLUDE_DIR@;@FCL_INCLUDE_DIRS@;@PQP_INCLUDE_DIR@;@ASSIMP_INCLUDE_DIRS@;@OPENGL_INCLUDE_DIR@)
-    if(_dir)
-        list(APPEND OMPL_INCLUDE_DIRS "${_dir}")
-    endif()
-endforeach()
-list(REMOVE_DUPLICATES OMPL_INCLUDE_DIRS)
-set(OMPL_INCLUDE_DIRS "${OMPL_INCLUDE_DIRS}" CACHE STRING "Include path for OMPL and its dependencies")
-
-set_and_check(OMPL_LIBRARY_DIR @PACKAGE_LIB_INSTALL_DIR@)
-set(OMPL_LIBRARY_DIRS "${OMPL_LIBRARY_DIR};@Boost_LIBRARY_DIRS@")
-foreach(_dir @FLANN_LIBRARY_DIRS@;@ODE_LIBRARY_DIRS@;@SPOT_LIBRARY_DIRS@;@FCL_LIBRARY_DIRS@;@ASSIMP_LIBRARY_DIRS@)
-    if(_dir)
-        list(APPEND OMPL_LIBRARY_DIRS "${_dir}")
-    endif()
-endforeach()
-list(REMOVE_DUPLICATES OMPL_LIBRARY_DIRS)
-set(OMPL_LIBRARY_DIRS "${OMPL_LIBRARY_DIRS}" CACHE STRING "Library path for OMPL and its dependencies")
-
-find_library(OMPL_LIBRARIES NAMES ompl.${OMPL_VERSION} ompl
-    PATHS ${OMPL_LIBRARY_DIR} NO_DEFAULT_PATH)
-foreach(_lib @Boost_SERIALIZATION_LIBRARY@;@Boost_FILESYSTEM_LIBRARY@;@Boost_SYSTEM_LIBRARY@;@ODE_LIBRARIES@;@SPOT_LIBRARIES@)
-    if(_lib)
-        list(APPEND OMPL_LIBRARIES "${_lib}")
-    endif()
-endforeach()
-
-find_library(OMPLAPPBASE_LIBRARY NAMES ompl_app_base.${OMPL_VERSION} ompl_app_base
-    PATHS ${OMPL_LIBRARY_DIR} NO_DEFAULT_PATH)
-find_library(OMPLAPP_LIBRARY NAMES ompl_app.${OMPL_VERSION} ompl_app
-    PATHS ${OMPL_LIBRARY_DIR} NO_DEFAULT_PATH)
-if (OMPLAPPBASE_LIBRARY AND OMPLAPP_LIBRARY)
-    set(OMPLAPP_LIBRARIES "${OMPLAPPBASE_LIBRARY};${OMPLAPP_LIBRARY};@ASSIMP_LIBRARIES@;@FCL_LIBRARIES@")
-    if(OPENGL_LIBRARIES)
-        list(APPEND OMPLAPP_LIBRARIES "${_lib}")
-    endif()
-    set(OMPLAPP_LIBRARIES "${OMPLAPP_LIBRARIES}"
-        CACHE STRING "Paths to OMPL.app libraries")
+
+find_package(Boost REQUIRED COMPONENTS serialization filesystem system program_options)
+find_package(Threads REQUIRED)
+find_package(Eigen3 REQUIRED)
+find_package(flann REQUIRED)
+find_package(ODE REQUIRED CONFIG)
+
+if (NOT TARGET "@CONFIG_NAMESPACE_CMAKE@::@PROJECT_NAME@")
+  include ( "${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake" )
 endif()
 
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(ompl DEFAULT_MSG OMPL_INCLUDE_DIRS OMPL_LIBRARY_DIRS OMPL_LIBRARIES)
+
+check_required_components(ompl)
+
diff --git a/src/ompl/CMakeLists.txt b/src/ompl/CMakeLists.txt
index 8e19b30..322b244 100644
--- a/src/ompl/CMakeLists.txt
+++ b/src/ompl/CMakeLists.txt
@@ -54,20 +54,22 @@ if(MSVC)
 else(MSVC)
     add_library(ompl SHARED ${OMPL_SOURCE_CODE})
 endif(MSVC)
-target_link_libraries(ompl
-    ${OMPL_LINK_LIBRARIES}
-    ${Boost_SERIALIZATION_LIBRARY}
-    ${Boost_FILESYSTEM_LIBRARY}
-    ${Boost_SYSTEM_LIBRARY}
-    ${CMAKE_THREAD_LIBS_INIT})
-
-if (OMPL_EXTENSION_ODE)
-    if (NOT CMAKE_VERSION VERSION_LESS 3.13)
-        target_link_directories(ompl PUBLIC ${ODE_LIBRARY_DIRS})
-    else()
-        link_directories(ompl ${ODE_LIBRARY_DIRS})
-    endif()
-endif()
+target_link_libraries(ompl PUBLIC
+    Eigen3::Eigen
+    Boost::serialization
+    Boost::filesystem
+    Boost::system
+    Boost::program_options
+    Boost::boost
+    Threads::Threads
+    ODE::ODE
+    flann::flann
+)
+target_include_directories(ompl PUBLIC
+  "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../src;${CMAKE_CURRENT_BINARY_DIR}/../../src;>"
+  "$<INSTALL_INTERFACE:include/ompl-1.6>" 
+)
+ set_target_properties(ompl PROPERTIES VERSION "1.6.0")
 
 if (OMPL_HAVE_SPOT)
     target_link_libraries(ompl ${SPOT_LIBRARIES})
@@ -86,7 +88,13 @@ endif (MSVC)
 # install the library
 install(TARGETS ompl
     DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    EXPORT ompl_targets
     COMPONENT ompl)
+install(EXPORT ompl_targets
+        FILE ompl-targets.cmake
+        NAMESPACE ompl::
+        DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/ompl/cmake
+        COMPONENT dev)
 if (NOT MSVC)
     add_custom_command(TARGET ompl POST_BUILD
         COMMAND "${CMAKE_COMMAND}" -E copy "$<TARGET_FILE:ompl>"
-- 
2.43.0

